# Input: Stack RET, N, MM
# Output: ANS, CNT
# Requites common
! MUL_SEEN
M MUL_SEEN 1
@JMP MULINIT
G MUL
:MUL
@POPI RETURN
@POPI MM
@POPI NN
@MC2M 0 ANS
@MC2M 0 NEGFLAG
# Test for Negative Numbers
@PUSH 0
@CMPI MM   # Same set flags as M - 0
@POPNULL
@JGE MNOTNEG
# Invert NEGFLAG
@PUSHI NEGFLAG
@INV
@POPI NEGFLAG
# Now Invert M (for 2's comp)
@PUSHI MM
@INV
@ADD 1
@POPI MM
:MNOTNEG
# Replete for N
@PUSH 0
@CMPI NN
@POPNULL
@JGE NNOTNEG
@PUSHI NEGFLAG
@INV
@POPI NEGFLAG
@PUSHI NN
@INV
@ADD 1
@POPI NN
:NNOTNEG
# While M != 0
:WHILE1
  @PUSH 0
  @CMPI MM
  @POPNULL
  @JMPZ ENDWHILE
# if m & 1 ; then m >> 1
  @PUSHI MM
  @AND 1
  @CMPI ONEMASK
  @POPNULL
  @JMPNZ ENDIF1
     # ANS = ANS + N
     @PUSHI ANS
     @ADDI NN
     @POPI ANS
:ENDIF1
  # N = N << 1
  @PUSHI NN
  @RTL
  @POPI NN
  # M = M / 2
  @PUSHI MM
  @RTR
  @POPI MM
@JMP WHILE1
:ENDWHILE   # Convert to Negative if NEGFLAG is set
@PUSH 0
@CMPI NEGFLAG
@POPNULL
@JMPZ NOTNEG
@PUSHI ANS
@INV
@ADD 1
@POPI ANS
:NOTNEG
@PUSHI ANS
@PUSHI RETURN
@RET
:RETURN
0
:NN
0
:MM
0
:ANS
0
:NEGFLAG
0
:ONEMASK
1
:UNUSED
0
b0
b0
:MULINIT
ENDBLOCK
