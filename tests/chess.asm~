I common.mc
#
# Implements a very basic Chess game. Using the 'screen.asm' for output.

@CALL InitChess
@CALL InitScreen
@CALL RefreshScreen
@JMP MainLoop

:InitChess
@PRTLN "Start Setup"
@MC2M cboard BoardPtrBlack
@ADDAV2C BoardPtrBlack 126 BoardPtrWhite
# Black officers are spots 0-7 and 'reverse' 63-65
@MC2M initOrder OfficePtr
@PRTLN "Set Officers"
@ForIfA2B Initx 0 8 InitLoop0
   @PUSHII OfficePtr       # Push Officer to stack
   @PUSHI BoardPtrBlack
   @POPS                   # Board[PtrBlack]=[OfficePtr]
   @PUSHII OfficePtr       # Add 'other side' bit let display deal with it.
   @OR SIDE
   @PUSHI BoardPtrWhite
   @POPS                   # Board[PtrWhite]=OfficePtr
   @INC2I OfficePtr        # Move pointers to next work (2 bytes)
   @INC2I BoardPtrBlack
   @DEC2I BoardPtrWhite
@NextStep Initx 1 InitLoop0
# Now set Pawn Rows
@PRTLN "Set Pawns"
@ForIfA2B Initx cboard+16 cboard+32 InitLoop1
  @PUSH PAWN
  @POPII Initx      # Set top row of pawns board[Initx]=Pawn
  @PUSH PAWN
  @OR SIDE          # Set bottom row of paws with Side Bit
  @PUSHI Initx      #    board[Initx+48]=(Pawn|Side)
  @ADD 80           # (cells are two bytes wide)
  @POPS             #Pops Pawn to index
@NextStep Initx 2 InitLoop1
  
# Now fill in with spaces all the empty parts of the cboard
@PRTLN "Clear Center"
@ForIfA2B Initx cboard+32 cboard+64 InitLoop2
   @PUSH SPACE
   @POPII Initx
@NextStep Initx 2 InitLoop2
@PRTLN "Finish Setup:"
@RET
=SPACE 0x00
=PAWN 0x01
=ROOK 0x02
=BISHOP 0x03
=QUEEN 0x04
=KNIGHT 0x05
=KING 0x06
=FRONTIER 0x07
=SIDE 0x20
# Local Storage
:OfficePtr 0
:BoardPtrWhite 0
:BoardPtrBlack 0
:Initx 0
:initOrder
ROOK KNIGHT BISHOP QUEEN KING BISHOP KNIGHT
:cboard
#0 2 4 6 8 A C E 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0
 1 1 1 1 1 1 1 1 1
#
#
:InitScreen
@PRTLN "Clearing Screen:"
@PRTS ClearScreen
@RET
:ClearScreen
# This is the escape codes to clear the screen in ANSI
#b$27 "[0m" b$27 "[0;0H" b$27 "[2J" b0
"<ESC>ClearScreen\n" b0
#
:RefreshScreen
@PRTLN "Start Refresh Screen"
@MC2M 0 DisX
@MC2M 0 DisY
@ForIfA2B Initx cboard cboard+128 RefreshLoop0
#   @PRT "(" @PRTI DisX @PRT "," @PRTI DisY @PRTLN ")"
   @PUSHII Initx
   @DUP
   @AND SIDE
   @POPNULL
   @MC2M 0 DisHolder
   @JMPZ DisWhite
      @RTL
      @ADD CharDBBlack
      @PUSHS      # Stack has ptr to string.
      @POPI DisHolder
      @PRTS DisHolder
      @JMP DisSkipWhite
   :DisWhite
      @RTL   
      @ADD CharDBWhite
      @PUSHS      # Stack has ptr to string.
      @POPI DisHolder
      @PRTS DisHolder
   :DisSkipWhite
   @INCI DisX
   @PUSHI DisX
   @CMP 8
   @POPNULL
   @JNZ DisSameLine
     @MC2M 0 DisX
     @INCI DisY
     @PRTNL
   :DisSameLine
@NextStep Initx 2 RefreshLoop0
@RET
:DisX 0
:DisY 0
:DisHolder 0
   
      
      
   



:CharDBBlack
" " b0
" " b0
"R" b0
"N" b0
"B" b0
"Q" b0
"K" b0
:CharDBWhite
" " b0
" " b0
"r" b0
"n" b0
"b" b0
"q" b0
"k" b0

:MainLoop

@RET
