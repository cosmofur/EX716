import numpy as np
from scipy.stats import chisquare

def autocorrelation(sequence, lag):
    n = len(sequence)
    mean = np.mean(sequence)
    variance = np.var(sequence)
    autocovariance = 0
    for i in range(n - lag):
        autocovariance += (sequence[i] - mean) * (sequence[i + lag] - mean)
    autocorrelation = autocovariance / (variance * (n - lag))
    return autocorrelation
# generate a list of random numbers (replace this with your own list)
random_nums = \
[133,755,949,756,512,608,493,814,371,21,724,687,126,458,155,888,385,527,298,929,565,645,665,226,176,322,672,387,731,71,927,876,742,404,846,157,721,785,942,791,84,774,773,240,439,787,756,17,250,384,451,586,982,78,370,459,145,331,977,196,300,656,736,213,863,517,207,70,394,474,903,280,357,39,286,257,264,628,869,610,627,801,116,755,911,23,587,204,674,852,746,469,333,705,57,62,496,142,128,495,579,675,376,233,94,768,311,834,553,933,446,715,468,682,245,388,352,480,268,413,667,837,27,254,926,266,938,423,593,279,513,432,228,388,313,746,343,9,848,875,354,750,535,284,869,27,934,581,257,401,509,134,124,334,772,551,983,339,235,296,202,928,410,833,437,565,810,723,56,810,849,380,667,79,88,413,734,932,39,238,722,882,214,367,141,343,29,360,504,924,92,633,323,41,819,746,110,254,771,164,329,27,362,445,492,920,201,6,63,301,704,407,651,827,431,112,622,864,846,633,585,21,413,482,956,714,740,171,295,455,196,165,66,804,387,974,781,225,778,111,952,182,881,40,44,236,112,321,615,897,79,418,130,582,246,843,53,851,125,60,992,168,181,630,315,45,924,15,582,42,867,728,305,575,522,233,997,205,353,42,120,394,872,715,187,655,591,716,710,452,22,509,153,345,630,607,28,846,973,568,895,371,468,809,170,480,675,890,414,638,58,275,89,403,129,524,756,192,448,53,831,613,431,422,826,34,591,96,301,63,486,585,720,164,533,402,547,849,292,59,343,583,275,20,618,924,946,797,789,289,769,902,416,238,304,847,11,235,64,49,38,840,511,114,9,517,110,507,436,730,469,740,784,40,4,229,611,909,179,582,334,850,602,263,561,375,737,736,708,948,1,562,287,81,0,155,810,334,199,124,789,123,110,885,737,9,197,998,68,406,972,879,391,923,947,88,170,24,634,137,869,125,498,539,0,882,49,708,123,663,800,205,654,28,263,542,154,442,902,183,85,415,229,688,960,508,804,473,291,137,43,50,542,862,459,28,273,99,562,773,948,456,913,846,31,397,928,711,83,387,119,928,566,936,46,961,41,557,125,322,924,762,916,475,727,15,932,981,10,876,587,302,237,809,490,951,920,278,57,392,524,844,848,137,559,969,279,746,586,118,958,683,21,899,301,412,424,728,869,446,259,117,124,343,38,626,579,520,273,671,698,537,429,765,41,906,64,466,72,43,643,191,303,508,630,548,198,813,585,953,318,423,20,918,125,896,351,955,132,649,138,528,851,194,894,198,746,91,33,475,329,852,164,776,112,893,751,661,607,726,258,642,279,912,245,135,686,913,128,748,245,242,515,945,516,363,823,143,963,836,562,996,98,125,245,873,481,742,384,286,528,151,443,843,752,913,982,912,711,442,465,53,822,347,356,826,645,44,216,600,692,45,555,981,379,910,790,434,314,55,481,423,913,40,140,508,737,378,231,153,200,483,266,918,911,964,757,171,286,189,169,569,885,814,12,478,172,207,847,507,659,928,90,72,810,489,301,733,186,355,992,954,249,36,579,199,512,45,622,76,439,894,586,2,590,47,29,487,429,16,416,44,468,265,211,185,219,402,22,422,147,844,217,171,762,53,356,40,577,638,999,445,104,15,515,947,807,744,510,8,198,289,449,141,837,114,844,858,92,827,159,623,620,797,954,948,787,630,693,345,154,743,840,326,233,696,956,404,536,1,503,41,479,74,42,702,670,475,989,995,525,716,856,288,557,262,203,189,324,671,494,162,243,360,193,719,922,889,909,325,729,722,8,538,272,371,51,775,15,348,598,596,422,117,17,513,6,239,964,990,325,176,807,491,844,441,58,624,27,546,326,806,434,955,25,547,529,132,620,360,824,685,719,757,831,30,738,202,15,728,189,207,886,241,584,332,957,34,435,993,692,715,255,751,651,652,506,20,298,453,701,409,145,534,304,382,704,455,923,403,440,729,926,984,911,770,921,637,534,139,324,874,869,348,696,160,380,909,499,53,579,238,246,18,26,895,449,519,89,392,572,68,425,194,175,225,400,811,722,454,623,756,677,267,510,541,601,129,573,630,4,550,372,535,303,43,323,768,58,120,34,793,781,293,874,171,936,26,449,364,35,783,176,885,542,124,663,198,18,562,278,863,973,559,629,296,872,628,180,105,179,281,395,706,454,982,835,660,161,243,962,381,812,624,289,478,919,541,280,367,995,507,495,560,454,80,398,617,905,725,501,954,812,906,316,131,639,183,308,613]
# calculate the expected frequencies assuming a uniform distribution
n = len(random_nums)
expected_freq = np.repeat(n/len(set(random_nums)), len(set(random_nums)))

# calculate the observed frequencies
observed_freq, _ = np.histogram(random_nums, bins=len(set(random_nums)))

# perform the chi-square goodness-of-fit test
chi, p = chisquare(observed_freq, f_exp=expected_freq)

# print the test statistics and p-value
print(f"Chi-square test statistic: {chi:.2f}")
print(f"P-value: {p:.4f}")
for i in range(10):
    print("Auto Correlation for lag %d is %s" % (i,autocorrelation(random_nums,i)))

